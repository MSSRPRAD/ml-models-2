# -*- coding: utf-8 -*-
"""Naive Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XOAYYsWZqXhJ1BqQJtW-b1BvkGFjRApI
"""
import sys
sys.path.append("..")
import pandas as pd
import numpy as np
from classes.NaiveBayes import NaiveBayes
from classes.Preprocessor import Preprocessing
import seaborn as sns
import matplotlib.pyplot as plt
from classes.Metrics import Metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

column_names = ["age", "workclass", "fnlwgt", "education", "education-num", "marital-status", "occupation", "relationship", "race", "sex", "capital-gain", "capital-loss", "hours-per-week", "native-country", "salary"]
print("---------------------loading data---------------------")
data = pd.read_csv("adult.csv", names=column_names)
print("---------------------preprocessing data---------------------")
replace_values = {" <=50K":"1", " >=50K":"-1", " >50K":"-1", " <50K":"1"}
# data.drop(['fnlwgt'], axis=1, inplace=True)

data['salary'] = data['salary'].replace(replace_values)
# strip whitespace before and after first and last character for all columns
data = data.applymap(lambda x: x.strip() if isinstance(x, str) else x)
data['fnlwgt'] = pd.cut(data['fnlwgt'], 5,labels=["1", "2", "3", "4", "5"])
# data.drop(['fnlwgt'], axis=1,inplace=True)
data['capital-gain'] = pd.cut(data['capital-gain'], 5,labels=["1", "2", "3", "4", "5"])
data['capital-loss'] = pd.cut(data['capital-loss'], 2,labels=["1", "2"])
data['hours-per-week'] = pd.cut(data['hours-per-week'], 5,labels=["1", "2", "3", "4", "5"])
# data.drop(['fnlwgt', 'capital-gain', 'capital-loss', 'hours-per-week'], inplace=True, axis=1)

# replace '?' with NaN
data = data.replace('?', np.nan)
data.isna().sum().sum()
data.dropna(inplace=True)

# Create a transformer to one-hot encode the categorical features
categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

Preprocessing = Preprocessing()
train,test = Preprocessing.train_test_split(data)
y = train['salary']
train = train.drop(['salary'], axis=1)

test_y = test['salary']
test = test.drop(['salary'], axis=1)


# Combine the transformers with the ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', categorical_transformer, train.columns)
    ])

# Combine the transformers with the ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', categorical_transformer, test.columns)
    ])
# print("---------------------training on logistic---------------------")
# # Create a logistic regression classifier
# classifier = LogisticRegression()

# # Combine the preprocessor and classifier into a pipeline
# model = Pipeline(steps=[
#     ('preprocessor', preprocessor),
#     ('classifier', classifier)
# ])

# # Fit the model to the data
# model.fit(train, y)

# predictions = model.predict(test)
# predictions = np.array(predictions)
# test_y = np.array(test_y)
# # Find accuracy, precision, recall

# Metrics = Metrics(predictions, test_y)

# print("---------------------Finding Metrics and saving to csv---------------------")
# metrics = [Metrics.accuracy(), Metrics.recall(), Metrics.precision(), 2*(Metrics.precision()*Metrics.precision())/(Metrics.precision()+Metrics.precision())]
# metrics = pd.Series(metrics,index=['Accuracy','Precision','Recall', 'F1'])
# metrics.to_csv("./data/naive-bayes/logistic-metrics.csv", header=False)
print("---------------------Training on knn(5)---------------------")
# Create a KNN classifier
classifier = KNeighborsClassifier(n_neighbors=5)
# Combine the preprocessor and classifier into a pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', classifier)
])
# Fit the model to the data
model.fit(train, y)
predictions = model.predict(test)
predictions = np.array(predictions)
test_y = np.array(test_y)
# Find accuracy, precision, recall
print(predictions)
print(test_y)
Metrics1 = Metrics(predictions, test_y)

print("---------------------Finding Metrics and saving to csv---------------------")
metrics = [Metrics1.accuracy(), Metrics1.recall(), Metrics1.precision(), 2*(Metrics1.precision()*Metrics1.precision())/(Metrics1.precision()+Metrics1.precision())]
metrics = pd.Series(metrics,index=['Accuracy','Precision','Recall', 'F1'])
metrics.to_csv("./data/naive-bayes/knn(5)-metrics.csv", header=False)